Installation
------------

Please note that on some systems python is installed as python3. If this is the case replace all python commands with python3.

1. Make sure Python is installed (see Python: https://www.python.org/).

2. Make sure virtualenv package is installed. On the command line run:

    pip install virtualenv

3. On command line in your working directory run:

    git clone https://github.com/warehauser/warehauser.git
    cd warehauser
    virtualenv venv

4. On Windows run:

    venv\Scripts\activate

On Linux or MacOS:

    source venv/Scripts/activate

5. Install required packages:

    pip install -r warehauser/requirements.txt

6. Create (or ensure one is created) your warehauser database. See Django documentation for supported database management systems (See https://docs.djangoproject.com/en/5.1/ref/settings/#databases).

7. Edit your .env file in the warehauser root directory to include environment specific settings. You can copy from the .env.git file as a template. Note that the Django (library used by warehauser) DJANGO_SECRET_KEY can be set in your environment variables (prefered) or in the .env file as DJANGO_SECRET_KEY. (See https://docs.djangoproject.com/en/5.1/ref/settings/ for more information on options for settings.)

8. On the command line run:

    python manage.py makemigrations
    python manage.py makemigrations core
    python manage.py migrate

9. Create a Warehauser superuser. This is distinct from the database superuser.

    python manage.py createsuperuser

and follow the prompts.

10. Create a client:

    python manage.py authtool client create <clientname> --email <admin email address>

This will create a Warehauser client called <clientname> and a User with a username <clientname> (which is the admin user for that client). It is good practice to copy down the client admin user's Authorization Token displayed at the end of executing this command. You can create as many non client admin users as you like by:

    python user create <username> --clientname <clientname> --email <email address> [--first <first name> --last <last name>] [--token true]

And follow the prompts. Note if you want that user to have access to the Warehauser API remember to include the --token true flag and to record the Authorization value for later.

Starting Warehauser
-------------------

1. When you are ready to start the warehauser server, on the command line run:

    python manage.py runserver

2. If you wish to run the scheduler then on another command line run:

    python warehauser/scheduler.py

3. All Warehuaser models are exposed to REST API services. CREATE with POST requests (Def models only), READ with GET requests, UPDATE with PATCH requests, and DELETE with DELETE requests.

Define your Def objects including WarehauserDef, ProductDef, and EventDef. You can use the REST service endpoints such as:

    https://<host>:<port|8000>/api/warehausedefs/
    https://<host>:<port|8000>/api/productdefs/
    https://<host>:<port|8000>/api/eventdefs/

Then CREATE instance objects of your Def objects using the appropriate Def object endpoint like so:

    POST https://<host>:<port|8000>/api/warehausedefs/<id>/do_spawn/
    POST https://<host>:<port|8000>/api/productdefs/<id>/do_spawn/
    POST https://<host>:<port|8000>/api/eventdefs/<id>/do_spawn/

Then read (GET), update (PATCH) and delete (DELETE) the instance objects using the following endpoints:

    https://<host>:<port|8000>/api/warehauses/<id>/
    https://<host>:<port|8000>/api/products/<id>/
    https://<host>:<port|8000>/api/events/<id>/

Remember to add to the HEADERS of the REST requests the following:

    Content-Type: application/json
    Authorization: Token <token>

Where token is the security token of the user you wish to use (see above). To retrieve that token you can use the authtoken command:

    python manage.py authtoken <username>

To create a token for a user without one use the following command:

    python manage.py authtoken <username> --create

Installation
------------

Please note that on some systems python is installed as python3. If this is the case replace all python commands with python3.

1. Make sure Python is installed (see Python: https://www.python.org/).

2. Make sure virtualenv package is installed. On the command line run:

    pip install virtualenv

3. On command line in your working directory run:

    git clone https://github.com/warehauser/warehauser.git
    cd warehauser
    virtualenv venv

4. On Windows run:

    venv\Scripts\activate

On Linux or MacOS:

    source venv/Scripts/activate

5. Install required packages:

    pip install -r warehauser/requirements.txt

6. Create (or ensure one is created) your warehauser database. See Django documentation for supported database management systems.

7. Edit your .env environment variables file to include environment secrets. Note that the Django (library used by warehauser) DJANGO_SECRET_KEY can be set in your environment variables (prefered) or in the .env file as DJANGO_SECRET_KEY. (See https://docs.djangoproject.com/en/5.0/ref/settings/ for more information on options for settings.)

# START OF .env FILE

DEBUG=True
# DEBUG=False

# DJANGO_SECRET_KEY=

DB_ENGINE=
DB_NAME=
DB_USER=
DB_PASSWORD=
DB_HOST=
DB_PORT=

# GMail settings...
EMAIL_HOST=
EMAIL_HOST_USER=
EMAIL_HOST_PASSWORD=
EMAIL_PORT=587
EMAIL_USE_TLS=True
EMAIL_BACKEND='django.core.mail.backends.smtp.EmailBackend'
EMAIL_FROM_ADDRESS=
EMAIL_WAREHAUSER_HOST=

# END OF .env FILE

8. On the command line run:

    python manage.py makemigrations
    python manage.py migrate

9. Create a superuser. In warehauser we assign all privileges via groups but the admin groups should still have is_superuser flag set to True as well to be compatible with third party libraries such as django-gaurdian.

    python manage.py createsuperuser

Create as many user accounts as you need by repeating these steps:

    python manage.py createsuperuser --no-superuser

Quick Start Guide
-----------------

1. Create a client Group and client User.

For each client run the following command:

    python manage.py client <client name>

For each client user run the following commands:

    python manage.py user <username> -e '<email address>' -p '<password>'

Record the Auth Token supplied for later.

    python manage.py user <username> -g <client name>

2. When you are ready to start the warehauser server, on the command line run:

    python manage.py runserver

3. If you wish to run the scheduler then on another command line run:

    python warehauser/scheduler.py

4. All Warehuaser models are exposed to REST API services. CREATE with POST requests (Def models only), READ with GET requests, UPDATE with PATCH requests, and DELETE with DELETE requests.

Define your Def objects including WarehauserDef, ProductDef, and EventDef. You can use the REST service endpoints such as:

    https://<host>:<port|8000>/api/warehausedefs/
    https://<host>:<port|8000>/api/productdefs/
    https://<host>:<port|8000>/api/eventdefs/

Then CREATE instance objects of your Def objects using the appropriate Def object endpoint like so:

    POST https://<host>:<port|8000>/api/warehausedefs/<id>/do_spawn/
    POST https://<host>:<port|8000>/api/productdefs/<id>/do_spawn/
    POST https://<host>:<port|8000>/api/eventdefs/<id>/do_spawn/

Then read (GET), update (PATCH) and delete (DELETE) the instance objects using the following endpoints:

    https://<host>:<port|8000>/api/warehauses/<id>/
    https://<host>:<port|8000>/api/products/<id>/
    https://<host>:<port|8000>/api/events/<id>/

Remember to add to the HEADERS of the REST requests the following:

    Content-Type: application/json
    Authorization: Token <token>

Where token is the security token of the user you wish to use (see above). To retrieve that token you can use the user command:

    python manage.py user -t <username>

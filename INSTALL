Installation
------------

Please note that on some systems python is installed as python3. If this is the case replace all python commands with python3.

1. Make sure Python is installed (see Python: https://www.python.org/).

2. Make sure virtualenv package is installed. On the command line run:

    pip install virtualenv

3. On command line in your working directory run:

    git clone https://github.com/warehauser/warehauser.git
    cd warehauser
    virtualenv venv

4. On Windows run:

    venv\Scripts\activate

On Linux or MacOS:

    source venv/Scripts/activate

5. Install required packages:

    pip install -r warehauser/requirements.txt

6. Create (or ensure one is created) your warehauser database. See Django documentation for supported database management systems.

7. Edit your .env environment variables file to include environment secrets. Note that the Django (library used by warehauser) DJANGO_SECRET_KEY can be set in your environment variables (prefered) or in the .env file as DJANGO_SECRET_KEY. (See https://docs.djangoproject.com/en/5.0/ref/settings/ for more information on options for settings.)

# START OF .env FILE

DEBUG=True
# DEBUG=False

# DJANGO_SECRET_KEY=

DB_ENGINE=
DB_NAME=
DB_USER=
DB_PASSWORD=
DB_HOST=
DB_PORT=

# GMail settings...
EMAIL_HOST=
EMAIL_HOST_USER=
EMAIL_HOST_PASSWORD=
EMAIL_PORT=587
EMAIL_USE_TLS=True
EMAIL_BACKEND='django.core.mail.backends.smtp.EmailBackend'
EMAIL_FROM_ADDRESS=
EMAIL_WAREHAUSER_HOST=

# END OF .env FILE

8. On the command line run:

    python manage.py makemigrations
    python manage.py migrate

9. Set up users, groups and permissions. Open a Django shell via the command line by running:

    python manage.py shell

Create groups in the shell by running these commands:

    from django.contrib.auth.models import Group
    g1 = Group.objects.create(name='admin')
    g2 = Group.objects.create(name='user')

Note you can use whatever group names you like, but remember them for the next step and you need two unique groups as default.

(Replace the group names with the names of the groups you created in step 9 if different.)

10. Create a superuser. In warehauser we assign all privileges via groups but the admin groups should still have is_superuser flag set to True as well to be compatible with third party libraries such as django-gaurdian.

    python manage.py createsuperuser

Create as many user accounts as you need by repeating these steps:

    python manage.py createsuperuser --no-superuser

Optionally add any groups:

    python manage.py addtogroup <username> <groupname>

where again <username> is the username you created in the createsuperuser command above, and replace <groupname> with the name of the group created above for users (ie 'admin', 'user').

Internationalization Quick Guide
--------------------------------

To register a new language to add to translations edit the warehauser\settings.py:

LANGUAGES = [
    ('<language code>', _('<language name>')),
]

where <language code> is the 2 letter code for your new language, and <language name> is the English name of the language. So for example:

    ('en', _('English')), # for English
    ('de', _('German')),  # for German

From the warehauser project base directory run the following command:

    django-admin makemessages -l <language code>

A few files will be created in the warehauser project directory:

    locale\<language code>\LC_MESSAGES\django.po

For each language you created. Open each such file in a text editor of your choice and add translations. Each message to translate will be in the form of:

    #: .\warehauser\settings.py:270
    msgid "English"
    msgstr ""

For each add the translation string in the double quotes "" of msgstr.

IMPORTANT: Some "msgid" will have "{variable}" strings. The msgstr MUST have the same "{variable}" EXACTLY as it appears in the msgid. For example:

    msgid "Some text {variable.somefunc()}"
    msgstr "<translation text for Some text> {variable.somefunc()}"

Quick Start Guide
-----------------

1. When you are ready to start the warehauser server, on the command line run:

    python manage.py runserver

2. If you wish to run the scheduler then on another command line run:

    python warehauser/scheduler.py

4. All Warehuaser models are exposed to REST API services. CREATE with POST requests (Def models only), READ with GET requests, UPDATE with PATCH requests, and DELETE with DELETE requests.

Define your Def objects including WarehauserDef, ProductDef, and EventDef. You can use the REST service endpoints such as:

    https://<host>:<port|8000>/api/warehausedefs/
    https://<host>:<port|8000>/api/productdefs/
    https://<host>:<port|8000>/api/eventdefs/

Then CREATE instance objects of your Def objects using the appropriate Def object endpoint like so:

    POST https://<host>:<port|8000>/api/warehausedefs/<id>/do_spawn/
    POST https://<host>:<port|8000>/api/productdefs/<id>/do_spawn/
    POST https://<host>:<port|8000>/api/eventdefs/<id>/do_spawn/

Then read (GET), update (PATCH) and delete (DELETE) the instance objects using the following endpoints:

    https://<host>:<port|8000>/api/warehauses/<id>/
    https://<host>:<port|8000>/api/products/<id>/
    https://<host>:<port|8000>/api/events/<id>/

Remember to add to the HEADERS of the REST requests the following:

    Content-Type: application/json
    Authorization: Token <token>

Where token is the security token of the user you wish to use. To get that token you can use the user command:

    python manage.py user -t <username>
